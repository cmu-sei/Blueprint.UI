/*
Copyright 2022 Carnegie Mellon University. All Rights Reserved.
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

/**
 * Blueprint API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DataTable } from '../model/dataTable';
import { Msel } from '../model/msel';
import { MselRole } from '../model/mselRole';
import { ProblemDetails } from '../model/problemDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class MselService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a Team to a Msel
     * Adds the team specified to the MSEL specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or a MSEL owner
     * @param mselId The ID of the Msel to update
     * @param teamId The ID of the Team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTeamToMsel(mselId: string, teamId: string, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public addTeamToMsel(mselId: string, teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public addTeamToMsel(mselId: string, teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public addTeamToMsel(mselId: string, teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mselId === null || mselId === undefined) {
            throw new Error('Required parameter mselId was null or undefined when calling addTeamToMsel.');
        }
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling addTeamToMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(mselId))}/addteam/${encodeURIComponent(String(teamId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a User Role to a Msel
     * Adds the User Role specified to the MSEL specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or a MSEL owner
     * @param userId The ID of the User
     * @param mselId The ID of the Msel to update
     * @param mselRole The MSEL Role to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public addUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public addUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public addUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addUserMselRole.');
        }
        if (mselId === null || mselId === undefined) {
            throw new Error('Required parameter mselId was null or undefined when calling addUserMselRole.');
        }
        if (mselRole === null || mselRole === undefined) {
            throw new Error('Required parameter mselRole was null or undefined when calling addUserMselRole.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(mselId))}/user/${encodeURIComponent(String(userId))}/role/${encodeURIComponent(String(mselRole))}/add`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new MSEL by copying an existing MSEL
     * Creates a new MSEL from the specified existing MSEL  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param id The ID of the MSEL to be copied
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyMsel(id: string, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public copyMsel(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public copyMsel(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public copyMsel(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling copyMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}/copy`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Msel
     * Creates a new Msel with the attributes specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param Msel The data used to create the Msel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMsel(Msel?: Msel, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public createMsel(Msel?: Msel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public createMsel(Msel?: Msel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public createMsel(Msel?: Msel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Msel>(`${this.configuration.basePath}/api/msels`,
            Msel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a Msel
     * Deletes a Msel with the specified id  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param id The id of the Msel to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMsel(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMsel(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMsel(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMsel(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a msel by id as xlsx file
     *
     * @param id The id of the msel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public download(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public download(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public download(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public download(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling download.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}/xlsx`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific Msel by id
     * Returns the Msel with the id specified
     * @param id The id of the Msel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMsel(id: string, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public getMsel(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public getMsel(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public getMsel(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets specific Msel data by id
     * Returns a DataTable for the Msel with the id specified
     * @param id The id of the Msel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMselData(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataTable>;
    public getMselData(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataTable>>;
    public getMselData(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataTable>>;
    public getMselData(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMselData.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DataTable>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}/data`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Msels
     * Returns a list of Msels.
     * @param UserId Whether or not to return records only for a designated user
     * @param TeamId Whether or not to return records only for a designated team
     * @param Description Whether or not to return records only for descriptions containing the designated string
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMsels(UserId?: string, TeamId?: string, Description?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Msel>>;
    public getMsels(UserId?: string, TeamId?: string, Description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Msel>>>;
    public getMsels(UserId?: string, TeamId?: string, Description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Msel>>>;
    public getMsels(UserId?: string, TeamId?: string, Description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (UserId !== undefined && UserId !== null) {
            queryParameters = queryParameters.set('UserId', <any>UserId);
        }
        if (TeamId !== undefined && TeamId !== null) {
            queryParameters = queryParameters.set('TeamId', <any>TeamId);
        }
        if (Description !== undefined && Description !== null) {
            queryParameters = queryParameters.set('Description', <any>Description);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Msel>>(`${this.configuration.basePath}/api/msels`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Msels for the current user
     * Returns a list of the current user&#39;s active Msels.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyMsels(observe?: 'body', reportProgress?: boolean): Observable<Array<Msel>>;
    public getMyMsels(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Msel>>>;
    public getMyMsels(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Msel>>>;
    public getMyMsels(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Msel>>(`${this.configuration.basePath}/api/msels/mine`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a Team from a Msel
     * Removes the team specified from the MSEL specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or a MSEL owner
     * @param mselId The ID of the Msel to update
     * @param teamId The ID of the Team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTeamFromMsel(mselId: string, teamId: string, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public removeTeamFromMsel(mselId: string, teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public removeTeamFromMsel(mselId: string, teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public removeTeamFromMsel(mselId: string, teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mselId === null || mselId === undefined) {
            throw new Error('Required parameter mselId was null or undefined when calling removeTeamFromMsel.');
        }
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling removeTeamFromMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(mselId))}/removeteam/${encodeURIComponent(String(teamId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a User Role from a Msel
     * Removes the User Role specified from the MSEL specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or a MSEL owner
     * @param userId The ID of the User
     * @param mselId The ID of the Msel to update
     * @param mselRole The MSEL Role to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public removeUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public removeUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public removeUserMselRole(userId: string, mselId: string, mselRole: MselRole, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeUserMselRole.');
        }
        if (mselId === null || mselId === undefined) {
            throw new Error('Required parameter mselId was null or undefined when calling removeUserMselRole.');
        }
        if (mselRole === null || mselRole === undefined) {
            throw new Error('Required parameter mselRole was null or undefined when calling removeUserMselRole.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(mselId))}/user/${encodeURIComponent(String(userId))}/role/${encodeURIComponent(String(mselRole))}/remove`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Replace a msel by id with data in xlsx file
     *
     * @param id The id of the msel
     * @param MselId
     * @param MselTemplateId
     * @param TeamId
     * @param ToUpload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceWithXlsxFile(id: string, MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public replaceWithXlsxFile(id: string, MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public replaceWithXlsxFile(id: string, MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public replaceWithXlsxFile(id: string, MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceWithXlsxFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (MselId !== undefined) {
            formParams.append('MselId', <any>MselId);
        }
        if (MselTemplateId !== undefined) {
            formParams.append('MselTemplateId', <any>MselTemplateId);
        }
        if (TeamId !== undefined) {
            formParams.append('TeamId', <any>TeamId);
        }
        if (ToUpload !== undefined) {
            formParams.append('ToUpload', <any>ToUpload);
        }

        return this.httpClient.put<string>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}/xlsx`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Msel
     * Updates a Msel with the attributes specified.  The ID from the route MUST MATCH the ID contained in the msel parameter  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param id The Id of the Msel to update
     * @param Msel The updated Msel values
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMsel(id: string, Msel?: Msel, observe?: 'body', reportProgress?: boolean): Observable<Msel>;
    public updateMsel(id: string, Msel?: Msel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Msel>>;
    public updateMsel(id: string, Msel?: Msel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Msel>>;
    public updateMsel(id: string, Msel?: Msel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateMsel.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Msel>(`${this.configuration.basePath}/api/msels/${encodeURIComponent(String(id))}`,
            Msel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload file(s)
     * File objects will be returned in the same order as their respective files within the form.
     * @param MselId
     * @param MselTemplateId
     * @param TeamId
     * @param ToUpload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadXlsxFiles(MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadXlsxFiles(MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadXlsxFiles(MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadXlsxFiles(MselId?: string, MselTemplateId?: string, TeamId?: string, ToUpload?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (MselId !== undefined) {
            formParams.append('MselId', <any>MselId);
        }
        if (MselTemplateId !== undefined) {
            formParams.append('MselTemplateId', <any>MselTemplateId);
        }
        if (TeamId !== undefined) {
            formParams.append('TeamId', <any>TeamId);
        }
        if (ToUpload !== undefined) {
            formParams.append('ToUpload', <any>ToUpload);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/api/msels/xlsx`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
